import pandas as pd
import numpy as np
import yfinance as yf
import pandas_ta as ta
import pandas_datareader as pdr
import datetime
from replit import db


# a function to calc linreg angle in degree, returns a tuple with first
# value is most recent lra, previous day lra is second tuple value.
def lrg_deg(ticker,length=50):
  """
  takes a yfinance ticker symbol and calculation period length and returns
  a tuple of current value[0] and previous day value[1]. Example useage: XX =       lrg_deg("SPY)
  ticker: str
  length: int
  """
  yfdata = yf.Ticker(ticker)
  year_yfdata = yfdata.history(period='1y',interval='1d')['Close']
  lr_data = ta.linreg(year_yfdata,length=length,angle=True,degrees=True)
  yf_tup = ((round(lr_data.tail().values[-1])),(round(lr_data.tail().values[-2])))
  print(f"LinReg Slope of {ticker} in degrees: {yf_tup[0]}")
  return yf_tup


# function to take the tuple value from lrg_deg and handle the alerts and return 
# a string message of the alert.
def lrg_alerts(tup, db_key, name='This ticker'):
  """
  Takes a tuple generated by the lrg_deg function, db key as string for storing     the trend alert value, ticker symbol short text name, ex. "USDX Dollar Index",    Example useage: alert_str = lrg_alerts(XX,'SPY_trend','S&P 500') 
  tup: tuple
  db_key: str , database entry to store week number of new trend, ex.'USDX_trend'
  name: str

  returns: str (alert message)
  """
  try:
    dbkey = db[db_key]
  except KeyError:
    print("DB db_key entry may not yet exist, assigning initial value")
    db[db_key] = "initial start value"
  
  cur_week = datetime.datetime.now().strftime("%W")

  if tup[0] >= 1:
    alert = f"{name} is in an uptrend."

  if tup[0] <= -1:
    alert = f"{name} is in a downtrend."

  if tup[0] == 0:
    alert = f"{name} is Not trending."

  if (tup[0] >= 1 and tup[0] > tup[1] and tup[1] <= 1) and (db[db_key] != cur_week): # trending + higher than previous number
    alert = f"*** {name} looks to be starting a new uptrend."
    db[db_key] = cur_week # db store week number so we can check before sending new

  if (tup[0] <= -1 and tup[0] < tup[1] and tup[1] >= -1) and (db[db_key] != cur_week):
    alert = f"*** {name} looks to be starting a new downtrend."
    db[db_key] = cur_week # db store week number so we can check before sending new

  print(alert)
  return alert    

# for determining whether send_new_alert = True , use string.startswith("***")
# and it should pick up when there is a new trend. include AND db[thekey] does not
# match cur_week value as well to stop duplicate alerts later in the week.

